const emptyViewConfig = {
  editable: true,
  zoomFixed: false,
  trackSourceServers: ["http://higlass.io/api/v1"],
  exportViewUrl: "http://localhost:8989/api/v1/viewconfs/",
  zoomLocks: {
    locksByViewUid: {},
    locksDict: {}
  },
  locationLocks: {
    locksByViewUid: {},
    locksDict: {}
  },
  views: []
}

const zoomChrom1 = [0, 249250621]
const zoomFullChrom = [0, 3095693981]

const genomePositionSearchBox = {
  autocompleteId: "OHJakQICQD6gTD7skx4EWA",
  autocompleteServer: "http://higlass.io/api/v1",
  chromInfoId: "b37",
  chromInfoServer: "http://higlass.io/api/v1",
  visible: true
}

function globalTrackTemplate (track) {
  return {
    type: "combined",
    uid: track.uid,
    height: track.height,
    width: track.width,
    position: 'top',
    options: {},
    contents: [
      {
        ...track,
        uid: `${track.uid}-inner`
      },
      {
        "uid": `${track.uid}-highlight`,
        "type": "viewport-projection-horizontal",
        "fromViewUid": "demo-focus",
        "options": {
          "projectionFillColor": "#777",
          "projectionStrokeColor": "#777",
          "projectionFillOpacity": 0.3,
          "projectionStrokeOpacity": 0.3
        },
        "name": "Viewport Projection",
        "position": "top"
      }
    ]
  }
}

const chromosomeAxisTrack = {
  name: "Chromosome Axis",
  created: "2017-06-13T17:06:10.941309Z",
  server: "http://higlass.io/api/v1",
  tilesetUid: "Ajn_ttUUQbqgtOD4nOt-IA",
  uid: "bpRZDog1QQuZ7DmLfsKwXw",
  type: "horizontal-chromosome-labels",
  options: {},
  width: 770,
  height: 30,
  position: "top"
}

const geneAnnotationsHG19Track = {
  name: "Gene Annotations (hg19)",
  created: "2017-02-05T19:31:52.412319Z",
  server: "http://higlass.io/api/v1",
  tilesetUid: "OHJakQICQD6gTD7skx4EWA",
  uid: "NaYcUhtrQyeQhqz9gJOjxQ",
  type: "horizontal-gene-annotations",
  options: {
    labelColor: "black",
    labelPosition: "hidden",
    plusStrandColor: "blue",
    minusStrandColor: "red",
    trackBorderWidth: 0,
    trackBorderColor: "black",
    name: "Gene Annotations (hg19)"
  },
  width: 20,
  height: 55,
  position: "top"
}

function globalView (uid, tracks) {
  return {
    uid: `${uid}-global`,
    initialXDomain: zoomFullChrom,
    initialYDomain: zoomFullChrom,
    genomePositionSearchBox,
    layout: {
      w: 12,
      h: 7,
      x: 0,
      y: 0,
      i: "eN9c0VphSmOaptnJ6cOTdg",
      moved: false,
      static: false
    },
    tracks: {
      top: tracks,
      left: [],
      center: [],
      right: [],
      bottom: []
    }
  }
}

function focusView (uid, tracks, highlights)
{
  return {
    uid: `${uid}-focus`,
    initialXDomain: zoomChrom1,
    initialYDomain: zoomChrom1,
    genomePositionSearchBox,
    layout: {
      w: 12,
      h: 8,
      x: 0,
      y: 7,
      i: "cc",
      moved: false,
      static: false
    },
    tracks: {
      top: tracks,
      left: [],
      center: [],
      right: [],
      bottom: []
    },
    overlays: !highlights ? [] : [
      {
        uid: `${uid}-focus-overlay`,
        includes: tracks.map(track => track.uid),
        options: {
          "extent": highlights
        }
      }
    ]
  }
}

function setOverlay(metaViewConfig, highlights) { // currently we assume the highlight will be on the bottom set of tracks, we can add a param later to amend that
  metaViewConfig.highlights = highlights
  return metaViewConfig
}

function addTrack(metaViewConfig, track) {
  metaViewConfig.tracks[track.track.uid] = track
  return metaViewConfig
}

function modifyTrack(metaViewConfig, track) {
  return addTrack(metaViewConfig, track)
}

function removeTrack(metaViewConfig, trackid) {
  delete metaViewConfig[trackid]

  return metaViewConfig
}

function sortTracks(tracks) {
  return tracks.sort((a, b) => a.order < b.order ? -1 : a.order > b.order ? 1 : 0)
}

function generateViewConfig(metaViewConfig) {
  let globalTracks = [
    chromosomeAxisTrack
  ].concat(
    sortTracks(Object.values(metaViewConfig.tracks))
      .filter(track => track.global)
      .map(track => globalTrackTemplate(track.track))
  )

  let focusTracks = [
    chromosomeAxisTrack,
    geneAnnotationsHG19Track
  ].concat(
    sortTracks(Object.values(metaViewConfig.tracks))
      .filter(track => track.focus)
      .map(track => track.track)
  )

  return JSON.parse(JSON.stringify({
    ...emptyViewConfig,
    views: [
      globalView(metaViewConfig.uid, globalTracks),
      focusView(metaViewConfig.uid, focusTracks, metaViewConfig.highlights)
    ]
  }))
}

export default {
  generateViewConfig,
  setOverlay,
  addTrack,
  modifyTrack,
  removeTrack,
  sortTracks
}
