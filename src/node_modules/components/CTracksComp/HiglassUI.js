import React from 'react';
import PropTypes from 'prop-types';

import * as hglib from 'higlass';
import hamradio from 'hamradio'
import './HiglassUI.css'

import 'higlass/build/hglib.css';

class HiglassUI extends React.Component {
  constructor(props) {
    super(props);
    this.api = null

    this.publishLocation = this.publishLocation.bind(this);
    this.subscriptions = []

    this.prevViewConfig = JSON.stringify(props.ViewConfig)
  }

  shouldComponentUpdate(newProps, newState) {
    if (this.prevViewConfig === newProps.ViewConfig) {
      return false;
    }

    //console.log('yes', newProps.ViewConfig);
    //console.log("shouldComponentUpdate: HiglassUI");
    this.prevViewConfig = newProps.ViewConfig;
    return true;
  }

  componentWillUnmount() {
    this.subscriptions.forEach(sub => sub.unsubscribe())
  }

  publishLocation (location) {
    if (this.props.chromInfo) {
      let chrome = location.xDomain
        .map(coord => this.props.chromInfo.absToChr(coord))
      hamradio.publish('viewport/moved', chrome)
    } else {
      setTimeout(this.publishLocation, 10, location)
    }
  }

  makeSubscriptions(api, ViewConfig) {
    return [
      hamradio.subscribe(
        'viewport/move',
        (name, data) => {
          let begin = this.props.chromInfo.chrToAbs(data[0])
          let end = this.props.chromInfo.chrToAbs(data[1])
          api.zoomTo(ViewConfig.views[1].uid, begin, end, begin, end, 1000)
        }
      )
    ]
  }

  launchHgLib(ViewConfig, options) {
    return (element) => {
      if (element && ViewConfig) {
        let api = hglib.viewer(
          element,
          ViewConfig,
          options
        );

        api.on('location', this.publishLocation, ViewConfig.views[1].uid)
        this.makeSubscriptions(api, ViewConfig)
      }
    }
  }

  render () {
  	return (
        <div className = "higlass"
          ref={this.launchHgLib(
            JSON.parse(this.props.ViewConfig),
            { bounded: false }
          )}>
        </div>
		)
  }
}

HiglassUI.propTypes = {
  ViewConfig: PropTypes.string,
}

export default HiglassUI;
