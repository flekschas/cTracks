import React from 'react';
import PropTypes from 'prop-types';

import * as hglib from 'higlass';
import hamradio from 'hamradio'
import './HiglassUI.css'

import 'higlass/dist/hglib.css';

import viewconfig from './utils/viewconfig'


class HiglassUI extends React.Component {
  constructor(props) {
    super(props);
    this.api = null

    this.publishLocation = this.publishLocation.bind(this);

    this.state = {
      metaViewConfig: {uid: props.uid, tracks: {}}
    }
    this.subscriptions = this.makeSubscriptions()

    this.prevViewConfig = JSON.stringify(this.state.metaViewConfig)
  }

  shouldComponentUpdate(newProps, newState) {
    if (this.prevViewConfig === JSON.stringify(newState.metaViewConfig)) {
      return false;
    }

    this.prevViewConfig = JSON.stringify(newState.metaViewConfig);
    return true;
  }

  componentWillUnmount() {
    this.subscriptions.forEach(sub => sub.unsubscribe())
  }

  publishLocation (location) {
    if (this.props.chromInfo) {
      let chrome = location.xDomain
        .map(coord => this.props.chromInfo.absToChr(coord))
      hamradio.publish('viewport/moved', chrome)
    } else {
      setTimeout(this.publishLocation, 10, location)
    }
  }

  makeSubscriptions() {
    return [
      hamradio.subscribe(
        'viewport/move',
        (name, data) => {
          if (this.props.chromInfo && this.api) {
            let begin = this.props.chromInfo.chrToAbs(data[0])
            let end = this.props.chromInfo.chrToAbs(data[1])
            this.api.zoomTo(`${this.state.metaViewConfig.uid}-focus`, begin, end, begin, end, 1000)
          }
        }
      ),
      hamradio.subscribe(
        'highlight',
        (name, data) => {
          if (this.props.chromInfo) {
            const highlights = data.map(bounds => bounds.map(coord => this.props.chromInfo.chrToAbs(coord)))
            this.setState({
              metaViewConfig: viewconfig.setOverlay(this.state.metaViewConfig, highlights)
            })
          }
        }
      ),
      hamradio.subscribe(
        'track/add', //global channel or focus
        (name, data) => {
          this.setState({
            metaViewConfig: viewconfig.addTrack(this.state.metaViewConfig, data)
          })
        }
      ),
      hamradio.subscribe(
        'track/remove', //global channel or focus
        (name, data) => {
          this.setState({
            metaViewConfig: viewconfig.removeTrack(this.state.metaViewConfig, data)
          })
        }
      ),
      hamradio.subscribe(
        'track/modify', //global channel or focus
        (name, data) => {
          console.log(data)
          this.setState({
            metaViewConfig: viewconfig.modifyTrack(this.state.metaViewConfig, data)
          })
        }
      )
    ]
  }

  launchHgLib() {
    return (element) => {
      if (element && this.state.metaViewConfig) {
        let api = hglib.viewer(
          element,
          viewconfig.generateViewConfig(this.state.metaViewConfig),
          { bounded: false }
        );
        this.api = api

        api.on('location', this.publishLocation, `${this.state.metaViewConfig.uid}-focus`)
      }
    }
  }

  render () {
  	return (
        <div className = "higlass"
          ref={this.launchHgLib()}>
        </div>
		)
  }
}

HiglassUI.propTypes = {
  uid: PropTypes.string,
}

export default HiglassUI;
