import React from 'react';

import CheckBox from './CheckBox';
import './TracksMenu.css';

import hamradio from 'hamradio'


class TracksMenu extends React.Component {
  constructor (props) {
    super(props);

    this.toggleCheckBoxGlobal = this.toggleCheckBoxGlobal.bind(this);
    this.toggleCheckBoxFocus = this.toggleCheckBoxFocus.bind(this);
    this.handleFormSubmit = this.handleFormSubmit.bind(this);
    this.createCheckBox = this.createCheckBox.bind(this);
    this.createCheckBoxes = this.createCheckBoxes.bind(this);

    this.subscriptions = this.makeSubscriptions()

    this.state = {
      tracks: []
    }
	}

	componentWillMount () {
	}

  componentWillUnmount() {
    this.subscriptions.forEach(sub => sub.unsubscribe())
  }

  makeSubscriptions = () => {
    return [
      hamradio.subscribe(
        'track/add',
        (name, data) => {
          console.log(name, data)
          let trackIndex = this.state.tracks.findIndex(track => track.uid === data.uid)
          let globalTrack = name.search('global') !== -1
          let focusTrack = name.search('focus') !== -1
          if (trackIndex === -1) {
            this.setState({
              tracks: [
                ...this.state.tracks,
                {
                  ...data,
                  global: globalTrack,
                  focus: focusTrack
                }
              ]
            })
          } else {
            this.setState({
              tracks: this.state.tracks.map((track, index) => index !== trackIndex
                ? track
                : globalTrack
                  ? {...track, global: true}
                  : {...track, focus: true}
              )
            })
          }
        }
      )
    ]
  }

  toggleCheckBoxGlobal (label) {
    for (var i = 0; i < this.state.tracks.length; i++) {
      if (this.state.tracks[i].label === label) {
        if (this.state.tracks[i].display.global) {
          hamradio.publish('track/remove/global', this.state.tracks[i].uid)
        } else {
          hamradio.publish('track/add/global', this.state.tracks[i])
        }
        break;
      }
    }
  }

  toggleCheckBoxFocus (label) {
    for (var i = 0; i < this.state.tracks.length; i++) {
      if (this.state.tracks[i].label === label) {
        if (this.state.tracks[i].display.focus) {
          hamradio.publish('track/remove/global', this.state.tracks[i].uid)
        } else {
          hamradio.publish('track/add/global', this.state.tracks[i])
        }
        break;
      }
    }
  }

  handleFormSubmit (formSubmitEvent) {
    formSubmitEvent.preventDefault();
  }

  createCheckBox (track, index) {
    var KeyGlobal = track.name + '_globalView';
    var KeyFocus = track.name + '_focusView';
    return <div key={index} className = "CheckBoxItem">
      <CheckBox className="CheckBox"
        label={track.options.name}
        InitialState={track.global}
        handleCheckBoxChange={this.toggleCheckBoxGlobal}
        key={KeyGlobal}
      />
      <CheckBox className="CheckBox"
        label={track.options.name}
        InitialState={track.focus}
        handleCheckBoxChange={this.toggleCheckBoxFocus}
        key={KeyFocus}
      />
      <label className="CheckBoxLabel">
        {track.name}
      </label>
    </div>;
  }

  createCheckBoxes () {

  	return <div>
      <div className = "CheckBoxItem">
        <label className="CheckBoxTitle">Global</label>
        <label className="CheckBoxTitle">Focus</label>
        <label className="CheckBoxTitle">Track name</label>
      </div>
      <div>
        {this.state.tracks.map(this.createCheckBox)}
      </div>
    </div>;
}

	render () {
		return (
      <div>
  			<label>Higlass - Tracks menu</label>
        <form onSubmit={this.handleFormSubmit}>
          {this.createCheckBoxes()}
          <button className="btn btn-default" type="submit">Update Display</button>
        </form>
      </div>
		)
	}
}


export default TracksMenu;
