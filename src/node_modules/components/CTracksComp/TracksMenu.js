import React from 'react';

import viewconfig from './utils/viewconfig'
import CheckBox from './CheckBox';
import TrackSpec from './TrackSpec'
import './TracksMenu.css';

import hamradio from 'hamradio'


class TracksMenu extends React.Component {
  constructor (props) {
    super(props);

    this.toggleCheckBoxGlobal = this.toggleCheckBoxGlobal.bind(this);
    this.toggleCheckBoxFocus = this.toggleCheckBoxFocus.bind(this);
    this.createCheckBox = this.createCheckBox.bind(this);
    this.createCheckBoxes = this.createCheckBoxes.bind(this);

    this.subscriptions = this.makeSubscriptions()

    this.state = {
      tracks: [],
      servers: [],
      editTrack: null
    }
	}

  componentWillUnmount() {
    this.subscriptions.forEach(sub => sub.unsubscribe())
  }

  updateTrack = (newTrack) => {
    let trackIndex = this.state.tracks.findIndex(track => track.track.uid === newTrack.track.uid)
    let tracks = (trackIndex === -1)
      ? [
          ...this.state.tracks,
          newTrack
        ]
      : this.state.tracks.map((orig, index) => index !== trackIndex ? orig : newTrack)
    this.setState({
      tracks: viewconfig.sortTracks(tracks)
    })
  }

  makeSubscriptions = () => {
    return [
      hamradio.subscribe(
        'track/add',
        (name, data) => {
          this.updateTrack(data)
        }
      ),
      hamradio.subscribe(
        'track/remove',
        (name, data) => {
          this.setState({
            tracks: this.state.tracks.filter(track => track.track.uid !== data)
          })
        }
      ),
      hamradio.subscribe(
        'server/add',
        (name, data) => {
          console.log('server added', data)
          this.setState({
            servers: this.state.servers.concat([data])
          })
        }
      )
    ]
  }

  toggleCheckBoxGlobal (name) {
    for (var i = 0; i < this.state.tracks.length; i++) {
      if (this.state.tracks[i].track.name === name) {
        let track = {
          ...this.state.tracks[i],
          global: !this.state.tracks[i].global
        }
        hamradio.publish('track/modify', track)
        break;
      }
    }
  }

  toggleCheckBoxFocus (name) {
    for (var i = 0; i < this.state.tracks.length; i++) {
      if (this.state.tracks[i].track.name === name) {
        let track = {
          ...this.state.tracks[i],
          focus: !this.state.tracks[i].focus
        }
        hamradio.publish('track/modify', track)
        break;
      }
    }
  }

  editTrack = (track) => {
    this.setState({
      editTrack: track
    })
  }

  createCheckBox (track, index) {
    var KeyGlobal = track.track.name + '_globalView';
    var KeyFocus = track.track.name + '_focusView';
    return <div key={index} className = "CheckBoxItem">
      <CheckBox className="CheckBox"
        label={track.track.name}
        InitialState={track.global}
        handleCheckBoxChange={this.toggleCheckBoxGlobal}
        key={KeyGlobal}
      />
      <CheckBox className="CheckBox"
        label={track.track.name}
        InitialState={track.focus}
        handleCheckBoxChange={this.toggleCheckBoxFocus}
        key={KeyFocus}
      />
      <label className="CheckBoxLabel">
        {track.track.name}
      </label>
      <button className="btn btn-default" onClick={() => this.editTrack(track)}>edit</button>
    </div>;
  }

  createCheckBoxes () {

  	return <div>
      <div className = "CheckBoxItem">
        <label className="CheckBoxTitle">Global</label>
        <label className="CheckBoxTitle">Focus</label>
        <label className="CheckBoxTitle">Track name</label>
      </div>
      <div>
        {this.state.tracks.map(this.createCheckBox)}
      </div>
    </div>;
}

	render () {
		return !this.state.editTrack ? (
      <div>
  			<label>Higlass - Tracks Menu</label>
        <div>
          {this.createCheckBoxes()}
        </div>
      </div>
		) : (
      <div>
  			<label>Higlass - Edit Track</label>
        <TrackSpec track={this.state.editTrack} servers={this.state.servers} done={() => this.editTrack(null)}/>
      </div>
    )
	}
}


export default TracksMenu;
