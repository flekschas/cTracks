import React from 'react';
import axios from 'axios'

import './TrackSpec.css';

import hamradio from 'hamradio'


class TrackSpec extends React.Component {
  constructor (props) {
    super(props);
    console.log(props.track)

    this.state = {
      track: JSON.parse(JSON.stringify(props.track.track)),
      serverIndex: 0,
      serverTilesets: []
    }
	}

  componentDidMount () {
    let promises = this.props.servers.map(server => {
      return axios.get(`${this.state.track.server}/tilesets`)
        .then(response => {
          return response.data.results
        })
        .catch(error => {
          console.log(error)
          return []
        })
    })
    Promise.all(promises)
      .then(results => {
        this.setState({
          serverTilesets: results
        })
      })
  }

  updateTrack = () => {
    hamradio.publish('track/modify', {...this.props.track, track: this.state.track})
  }

  cancelUpdate = () => {
    hamradio.publish('track/modify', this.props.track)
  }

  setServer = (i) => {
    this.setState({
      serverIndex: i,
      track: {...this.state.track, server: this.props.servers[i]}
    })
  }

  setTrackValue = (key, value) => {
    this.setState({
      track: {
        ...this.state.track,
        [key]: value
      }
    })
  }

  setOptionValue = (option, value) => {
    this.setState({
      track: {
        ...this.state.track,
        options: {
          ...this.state.track.options,
          [option]: value
        }
      }
    })
  }

	render () {
		return (
      console.log(this.state.serverTilesets[this.state.serverIndex])
      <div>
        <div>
          <label>{this.state.track.name}</label>
        </div>
        <div>
          <label>Server</label>
          <select id="track-server" onChange={(e) => this.setServer(e.target.value)}>
            {this.props.servers.map((server, i) => <option key={server} value={i}>{server}</option>)}
          </select>
        </div>
        <div>
          <label>Tileset</label>
          <select id="track-tileset" onChange={(e) => this.setTrackValue('tilesetUid', e.target.value)}>
            {this.state.serverTilesets[this.state.serverIndex].map(tileset => <option key={tileset.uuid} value={tileset.uuid}>{tileset.name}</option>)}
          </select>
        </div>
        <div>
          <label>Color</label>
          <input type="text" id="track-color" name="track-color" value={this.state.track.options.pointColor}
            onChange={(e) => this.setOptionValue('pointColor', e.target.value)}
          ></input>
        </div>
        <button type="button" className="btn btn-default" onClick={this.updateTrack}>Update</button>
        <button type="button" className="btn btn-default" onClick={this.cancelUpdate}>Cancel</button>
      </div>
		)
	}
}


export default TrackSpec;
