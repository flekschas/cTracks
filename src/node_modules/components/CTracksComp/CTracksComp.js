import React from 'react';
import PropTypes from 'prop-types';

// Note: this two class will be removed
// import * as ViewConfig from './ViewConfig';
// import * as ViewConfig_Test from './ViewConfig_Test';
// Note: final file to generate viewconfig
import GenerateViewConfig from './utils/GenerateViewConfig';

import HiglassUI from './HiglassUI';
import CNVTable from './CNVTable';
import HiglassAPI from './utils/HiglassAPI';
import ChromView from './ChromView';
import TracksMenu from './TracksMenu';
import {testCNVTable} from './TestCNVTable.js';
import NGSLink from './NGSLink.js';

import ReactFileReader from 'react-file-reader';
import Papa from 'papaparse';

import hamradio from 'hamradio'

//import '../node_modules/bootstrap/dist/css/bootstrap.min.css';
import './CTracksComp.css';

//import './Components/HiGlassLauncher.scss';


// Parse CNV BED file as a CSV file
function ParseFile(file, callback) {
  Papa.parse(file, {
    //download: true,
    newline: "\n",
    header: true,
    dynamicTyping: true,
    error: function(error) {
      console.log("ERROR Parse:",error);
    },
    complete: function(results) {
      callback(results.data);
    }
  });
}


class CTracksComp extends React.Component {
  constructor (props) {
    super(props);

    // ListenerID for HiglassAPI
    this.listenerID = null;

    // ViewID: ViewID of Higlass view (not directly used right now...)
    // viewport: chromosobal location (beginning and end) from higlass api
    // CNVData: BED File information
    // HiglassView: ViewConfig for Higlass
    // InputConfigFile: Input JSON file provided by ARUP
    // CNVSelection: selected CNV samples from analysis
    this.state = {
      ViewID: null,
      viewport: null,
      CNVData: null,
      HiglassView: null,
      InputConfigFile: null,
      CNVSelection: null,
      subscriptions: this.makeSubscriptions()
    };

    this.InitialInputConfigFile = null;

    this.highlightRegion = null;   // a region that we want highlighted
                                  // in the zoomed-in higlass view
                                  // should be updated in handleTableHover

    //Binding functions
    this.GenerateHiglassView = this.GenerateHiglassView.bind(this);
    this.UpdateHiglassView = this.UpdateHiglassView.bind(this);
    this.RetrieveViewID = this.RetrieveViewID.bind(this);
    this.UpdateViewID = this.UpdateViewID.bind(this);
    this.UpdateCNVData = this.UpdateCNVData.bind(this);
    this.UpdateHiglassView = this.UpdateHiglassView.bind(this);
    this.UpdateConfigFile = this.UpdateConfigFile.bind(this);
    this.ProcessCNVFile = this.ProcessCNVFile.bind(this);
    this.LoadConfigFile = this.LoadConfigFile.bind(this);
    this.Reset = this.Reset.bind(this);
  }

  componentWillMount() {

  }

  componentDidMount() {

    this.ReadInputFile();

    this.setState({
      CNVData: testCNVTable,
    });
  }

  componentDidUpdate() {

  }

  componentWillUnmount() {
    this.state.subscriptions.forEach(sub => sub.unsubscribe())
  }

  makeSubscriptions() {
    return [
      hamradio.subscribe(
        'viewport',
        (name, data) => {
          this.setState(function () {
            return {
              viewport: data
            }
          })
        })
    ]
  }

  // Read Input File
  ReadInputFile() {
    this.InitialInputConfigFile = JSON.parse(JSON.stringify(this.props.InputFile));
    this.UpdateConfigFile(this.props.InputFile);
    this.GenerateHiglassView(this.props.InputFile);
  }

  handleHiGlassUpdated() {
    this.RetrieveViewID();
  }

  // Generate ViewConfig for Higlass
  GenerateHiglassView(ConfigFile) {

    if (ConfigFile === undefined) ConfigFile = this.state.InputConfigFile;

    var HiglassViewConfig = new GenerateViewConfig(
      ConfigFile,
      this.highlightRegion
    );

    //HiglassViewConfig.CreateViewConfigDefault();
    HiglassViewConfig.CreateViewConfig();
    var HiglassView = HiglassViewConfig.getViewConfig();
    this.UpdateHiglassView(HiglassView);

    //console.log('ConfigFile',ConfigFile);
    //console.log('HIGLASS_VIEW',HiglassView);
  }

  // Update state of HiglassView
  UpdateHiglassView (HiglassView) {
    this.setState(function () {
      return {
        HiglassView: JSON.stringify(HiglassView)
      }
    })
  }

  // Retrieve ViewID
  RetrieveViewID() {
    //console.log("Retrieving ViewID (static)...");
    let viewid = HiglassAPI.fetchViewConfig()
    this.UpdateViewID(viewid)
  }

  // Update state of ViewID
  UpdateViewID(ViewUID) {
    //console.log("ViewUID:", ViewUID);
    this.setState(function () {
      return {
        ViewID: ViewUID
      }
    })
  }

  LoadConfigFile(files) {
    let reader = new FileReader();
    reader.onload = (event) => {
      var obj = JSON.parse(event.target.result);
      // console.log('obj', obj);

      this.UpdateConfigFile(obj);
      this.GenerateHiglassView(obj);

    };

    reader.readAsText(files[0]);
  }

  // Update state of InputConfigFile
  UpdateConfigFile (File) {
    //console.log("In function: UpdateConfigFile");
    this.setState (function () {
      return {
        InputConfigFile: File
      }
    })
  }

  ListenerID (id) {
    this.listenerId = id;
  }

  // Process CNV BED file: upload, parse and update state
  ProcessCNVFile (files) {
    // console.log("Processing CNVFile...");
    // Loading file
    var reader = new FileReader();
    reader.onload = function(e) {
      // Use reader.result
      // var text = reader.result;
    }
    //reader.readAsText(files[0]);
    this.UpdateCNVSelection(null);
    ParseFile(files[0], this.UpdateCNVData);
  }

  // Update state of CNV data
  UpdateCNVData(data) {
    //console.log("CNVData:", JSON.stringify(data, null, 2));
    this.setState(function () {
      return {
        CNVData: data
      }
    });
  }

  Reset () {
    console.log("RESET");
    console.log("InitialInputConfigFile",this.InitialInputConfigFile);
    this.UpdateConfigFile(this.InitialInputConfigFile);
    this.GenerateHiglassView(this.InitialInputConfigFile);
  }

  handleRowLeave(row) {

  }

  handleRowEnter(row) {
    /**
     * The user has hovered over a row of the CNV table so
     * we may want to update the view and highlight the region
     * that was highlighted.
     *
     * Parameters
     * ----------
     *  chr: string
     *  startPos: int
     *  endPos: int
     *
     * Returns
     * -------
     *  (nothing)
     *    Just has side effects
     */
    if (!this.props.chromInfo) {
      // we don't have any assembly information so we can't
      // highlight this region
      return;
    }

    const rowStart = this.props.chromInfo
      .chrPositions[row['#chrom']].pos + +row.start;

    const rowEnd = this.props.chromInfo
      .chrPositions[row['#chrom']].pos + +row.stop;

    this.highlightRegion = [rowStart, rowEnd];
    this.GenerateHiglassView();
  }

  handleCNVSelection (CNVSelection) {
    //console.log("Table Selection: ", CNVSelection);
    this.UpdateCNVSelection(CNVSelection);
  }

  // Update state of CNV selection
  UpdateCNVSelection(selection) {
    this.setState(function () {
      return {
        CNVSelection: selection
      }
    });
  }

  render() {
    // Feature: can add button to choose our initial ViewConfig
    //var MyViewConfig = ViewConfig_Test.ViewConfig_Artificial_LocalData;
    //var MyViewConfig = ViewConfig.ViewConfig_DualView;
    return (
      <div className = "TopContainer">

        <div className = "LeftPanel">
          <div className = "Box">
            <label>Loading input files</label>

            <div className = "FileReader">
              <ReactFileReader  handleFiles={this.LoadConfigFile} fileTypes={'*'}>
                <button className="btn btn-default">Load Input Config File</button>
              </ReactFileReader>
            </div>

            <div className = "FileReader">
              <ReactFileReader handleFiles={this.ProcessCNVFile} fileTypes={'.bed, .tsv'}>
                <button className="btn btn-default">Load CNV BED File</button>
              </ReactFileReader>
            </div>

          </div>

          <div className = "Box">
            { this.state.InputConfigFile ?
              <TracksMenu ConfigFile = {this.state.InputConfigFile} UpdateDisplay = {this.GenerateHiglassView}
              /> : null
            }
          </div>

          <div className = "Box">
            <label>Higlass - Update bottom view</label>
            <ChromView />
          </div>

          <div className = "Box">
            <label>CNV analysis - Apply results</label>
            { this.state.InputConfigFile && this.state.CNVSelection ?
              <NGSLink
                referralAdress={this.state.InputConfigFile.referralAdress}
                CNVSelection={this.state.CNVSelection}
              /> : null
            }
          </div>
        </div>

        <div className = "RightPanel">
          <div className = "RightBox">
            { this.state.HiglassView ?
              <HiglassUI
              onHiglassUpdated = {this.handleHiGlassUpdated.bind(this)}
              ViewConfig = {this.state.HiglassView}
              chromInfo = {this.props.chromInfo}
              /> : null
            }
          </div>
          <div className = "RightBox">
            {this.state.viewport && this.state.CNVData &&
            <CNVTable
              CNVData={this.state.CNVData}
              location={this.state.viewport}
              onRowEnter={this.handleRowEnter.bind(this)}
              onCNVSelection={this.handleCNVSelection.bind(this)}
            />}
          </div>
        </div>

      </div>
    )
  }
}

CTracksComp.propTypes = {
  InputFile: PropTypes.object.isRequired
}

export default CTracksComp;
