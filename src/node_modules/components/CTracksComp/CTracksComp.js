import React from 'react';

import HiglassUI from './HiglassUI';
import CNVTable from './CNVTable';
import ChromView from './ChromView';
import TracksMenu from './TracksMenu';
import {testCNVTable} from './TestCNVTable.js';

import ReactFileReader from 'react-file-reader';
import Papa from 'papaparse';

import hamradio from 'hamradio'

//import '../node_modules/bootstrap/dist/css/bootstrap.min.css';
import './CTracksComp.css';

//import './Components/HiGlassLauncher.scss';


// Parse CNV BED file as a CSV file
function ParseFile(file, callback) {
  Papa.parse(file, {
    //download: true,
    newline: "\n",
    header: true,
    dynamicTyping: true,
    error: function(error) {
      console.log("ERROR Parse:",error);
    },
    complete: function(results) {
      callback(results.data);
    }
  });
}


class CTracksComp extends React.Component {
  constructor (props) {
    super(props);

    // viewport: chromosomal location (beginning and end) from higlass api
    // CNVData: BED File information
    // CNVSelection: selected CNV samples from analysis
    this.state = {
      viewport: null,
      CNVData: null,
      CNVSelection: null
    };

    this.subscriptions = this.makeSubscriptions()

    //Binding functions
    this.UpdateCNVData = this.UpdateCNVData.bind(this);
    this.ProcessCNVFile = this.ProcessCNVFile.bind(this);
  }

  componentWillMount() {

  }

  componentDidMount() {
    this.setState({
      CNVData: testCNVTable,
    });
  }

  componentDidUpdate() {

  }

  componentWillUnmount() {
    this.subscriptions.forEach(sub => sub.unsubscribe())
  }

  makeSubscriptions() {
    return [
      hamradio.subscribe(
        'viewport/moved',
        (name, data) => {
          this.setState(function () {
            return {
              viewport: data
            }
          })
        })
    ]
  }

  // Process CNV BED file: upload, parse and update state
  ProcessCNVFile (files) {
    // console.log("Processing CNVFile...");
    // Loading file
    var reader = new FileReader();
    reader.onload = function(e) {
      // Use reader.result
      // var text = reader.result;
    }
    //reader.readAsText(files[0]);
    this.UpdateCNVSelection(null);
    ParseFile(files[0], this.UpdateCNVData);
  }

  // Update state of CNV data
  UpdateCNVData(data) {
    //console.log("CNVData:", JSON.stringify(data, null, 2));
    this.setState(function () {
      return {
        CNVData: data
      }
    });
  }

  handleRowLeave(row) {

  }

  handleRowEnter(row) {
    /**
     * The user has hovered over a row of the CNV table so
     * we may want to update the view and highlight the region
     * that was highlighted.
     *
     * Parameters
     * ----------
     *  chr: string
     *  startPos: int
     *  endPos: int
     *
     * Returns
     * -------
     *  (nothing)
     *    Just has side effects
     */
    if (!this.props.chromInfo) {
      // we don't have any assembly information so we can't
      // highlight this region
      return;
    }

    const rowStart = this.props.chromInfo
      .chrPositions[row['#chrom']].pos + +row.start;

    const rowEnd = this.props.chromInfo
      .chrPositions[row['#chrom']].pos + +row.stop;

    hamradio.publish('highlight', [rowStart, rowEnd])
  }

  handleCNVSelection (CNVSelection) {
    //console.log("Table Selection: ", CNVSelection);
    this.UpdateCNVSelection(CNVSelection);
  }

  // Update state of CNV selection
  UpdateCNVSelection(selection) {
    this.setState(function () {
      return {
        CNVSelection: selection
      }
    });
  }

  render() {
    return (
      <div className = "TopContainer">

        <div className = "LeftPanel">
          <div className = "Box">
            <label>Loading input files</label>

            <div className = "FileReader">
              <ReactFileReader handleFiles={this.ProcessCNVFile} fileTypes={'.bed, .tsv'}>
                <button className="btn btn-default">Load CNV BED File</button>
              </ReactFileReader>
            </div>

          </div>

          <div className = "Box">
            <label>Higlass - Update bottom view</label>
            <ChromView chromInfo = {this.props.chromInfo} />
          </div>

          <div className = "Box">
            <TracksMenu />
          </div>

        </div>

        <div className = "RightPanel">
          <div className = "RightBox">
            <HiglassUI
              uid = {this.props.uid}
              chromInfo = {this.props.chromInfo}
            />
          </div>
          <div className = "RightBox">
            {this.state.viewport && this.state.CNVData &&
            <CNVTable
              CNVData={this.state.CNVData}
              location={this.state.viewport}
              onRowEnter={this.handleRowEnter.bind(this)}
              onCNVSelection={this.handleCNVSelection.bind(this)}
            />}
          </div>
        </div>

      </div>
    )
  }
}

export default CTracksComp;
