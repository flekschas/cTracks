import React from 'react'
import hamradio from 'hamradio'
import axios from 'axios'

import viewconfig from './utils/viewconfig'
import HiglassUI from './HiglassUI'
import CNVTable from './CNVTable'
import ChromView from './ChromView'
import TracksMenu from './TracksMenu'
import ServerAdd from './ServerAdd'
import RegisterURL from './RegisterURL'
import ResilientData from './ResilientData'

import './CTracksComp.css'


class CTracksComp extends React.Component {
  constructor (props) {
    super(props);

    this.state = {
      expanded: true,
      tracks: ResilientData.tracks(),
      servers: ResilientData.servers(),
      variants: ResilientData.variants()
    }
    this.subscriptions = this.makeSubscriptions()
  }

  componentWillUnmount() {
    this.subscriptions.forEach(sub => sub.unsubscribe())
  }

  makeSubscriptions() {
    return [
      hamradio.subscribe(
        'registerURL',
        (name, {server, ...data}) => {
          axios.post(`${server}/register_url/`, data).then(response => {
            hamradio.publish('server/updated', server)
          })
        }
      ),
      hamradio.subscribe(
        'track/add',
        (name, data) => {
          this.updateTrack(data)
        }
      ),
      hamradio.subscribe(
        'track/modify',
        (name, data) => {
          this.updateTrack(data)
        }
      ),
      hamradio.subscribe(
        'track/remove',
        (name, data) => {
          this.setState({
            tracks: this.state.tracks.filter(track => track.track.uid !== data)
          })
        }
      ),
      hamradio.subscribe(
        'server/add',
        (name, data) => {
          console.log('server/add in CTracksComp', this.state.servers, data)
          this.setState({
            servers: this.state.servers.concat([data])
          })
        }
      )
    ]
  }

  updateTrack = (newTrack) => {
    let trackIndex = this.state.tracks.findIndex(track => track.track.uid === newTrack.track.uid)
    let tracks = (trackIndex === -1)
      ? [
          ...this.state.tracks,
          newTrack
        ]
      : this.state.tracks.map((orig, index) => index !== trackIndex ? orig : newTrack)
    this.setState({
      tracks: viewconfig.sortTracks(tracks)
    })
  }

  hideTools = () => {
    this.setState({expanded: false})
  }

  showTools = () => {
    this.setState({expanded: true})
  }

  render() {
    return (
      <div className = "TopContainer">

        {!this.state.expanded || <div className="LeftPanel">
          <div className="Box PanelBox">
            <ChromView
              chromInfo = {this.props.chromInfo}
            />
          </div>
          <div className="Box PanelBox">
            <ServerAdd
              servers={this.state.servers}
            />
          </div>
          <div className="Box PanelBox">
            <RegisterURL
              servers={this.state.servers}
            />
          </div>
          <div className="Box PanelBox">
            <TracksMenu
              tracks={this.state.tracks}
              servers={this.state.servers}
            />
          </div>
        </div>}

        <div className = "Expander">
          {this.state.expanded
            ? <div className = "ExpandButton" onClick={this.hideTools}> &lt; </div>
            : <div className = "ExpandButton" onClick={this.showTools}> &gt; </div>
          }
        </div>

        <div className = "RightPanel">
          <div className = "Box">
            <HiglassUI
              uid={this.props.uid}
              chromInfo={this.props.chromInfo}
              tracks={this.state.tracks}
            />
          </div>
          <CNVTable
            variants={this.state.variants}
          />
        </div>

      </div>
    )
  }
}

export default CTracksComp;
